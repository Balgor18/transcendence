services:

# ---------------------------------------------------------------------------- #

  frontend:
    container_name: frontend
    build:
      args:
        FRONTEND_URL: ${FRONTEND_URL:?}
        REACT_APP_URL_BACKEND: ${BACKEND_URL:?}
        REACT_APP_MAX_CHATROOM_NBR: ${MAX_CHATROOM_NBR:?}
        REACT_APP_MAX_CHATROOM_MEMBER_NBR: ${MAX_CHATROOM_MEMBER_NBR:?}
    networks:
      - public
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy

# ---------------------------------------------------------------------------- #

  backend:
    depends_on:
      database:
        condition: service_healthy
    container_name: backend
    env_file:
      - .env
    environment:
      NEST_DEBUG : null # TODO REMOVE THIS ('true' break compilation on other machines)
      FRONTEND_URL: ${FRONTEND_URL:?}
      BACKEND_URL: ${BACKEND_URL:?}
      SESSION_SECRET: ${SESSION_SECRET:?}
      JWT_SECRET: ${JWT_SECRET:?}
      DATABASE_URL: postgresql://${POSTGRES_USER:?}:${POSTGRES_PASSWORD:?}@database:5432/pong?schema=public
      INTRA42_CLIENT_ID: ${INTRA42_CLIENT_ID:?}
      INTRA42_CLIENT_SECRET: ${INTRA42_CLIENT_SECRET:?}
      GITHUB_CLIENT_ID: ${GITHUB_CLIENT_ID:?}
      GITHUB_CLIENT_SECRET: ${GITHUB_CLIENT_SECRET:?}
    restart: unless-stopped

# ---------------------------------------------------------------------------- #

  database:
    container_name: postgres
    image: postgres:15.1-alpine
    environment:
      POSTGRES_USER: $POSTGRES_USER
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
    volumes:
      - db:/var/lib/postgresql/data
    networks:
      - private
    restart: unless-stopped
    healthcheck:
      test: pg_isready -U ${POSTGRES_USER:?}
      interval: 10s
      timeout: 2s
      retries: 25
      start_period: 2s

# ---------------------------------------------------------------------------- #

  controller:
    container_name: health_controller
    build:
      context: health_controller
      dockerfile: Dockerfile
    restart: 'no'
    depends_on:
      database:
        condition: service_healthy
      backend:
        condition: service_healthy
      frontend:
        condition: service_healthy

# ---------------------------------------------------------------------------- #

volumes:
  db: {}

# ---------------------------------------------------------------------------- #

networks:
  public:
  private:
