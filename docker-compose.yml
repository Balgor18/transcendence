services:

  # proxy:
  #   depends_on:
  #     - client
  #     - api
  #   container_name: nginx
  #   image: nginx:1.23.3
  #   networks:
  #     - transcendence
  #   ports:
  #     - 443:443
  #   restart: unless-stopped

  frontend:
    container_name: ${FRONTEND_NAME}
    image: ${NODE_VERSION}
    stdin_open: true
    tty: true

    working_dir: /app-${FRONTEND_NAME}
    # Install project dependencies,, then run front
    command: >
            sh -cx "npm install
            && npm run start"
    # Ports should always be strings
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT}"
    env_file:
      - .env
    networks:
      - transcendence
    volumes:
      - ./${FRONTEND_NAME}:/app-${FRONTEND_NAME}
    restart: unless-stopped

  database:
    container_name: postgres
    image: postgres:15.1-alpine
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    environment:
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
      POSTGRES_USER: $POSTGRES_USER
      POSTGRES_PORT: $POSTGRES_PORT
    volumes:
      - db:/var/lib/postgresql/data
    networks:
      - transcendence
    restart: unless-stopped
    healthcheck:
      test: pg_isready -U ${POSTGRES_USER}
      interval: 10s
      timeout: 2s
      retries: 25
      start_period: 2s

  backend:
    depends_on:
      database:
        condition: service_healthy
    container_name: ${BACKEND_NAME}
    image: ${NODE_VERSION}
    working_dir: /app-${BACKEND_NAME}
    # install project dependencies,
    # then run in dev mode
    command: sh -cx 'apk add --no-cache curl && yarn install && yarn prisma db push && yarn prisma db seed && yarn run start:debug'

  # yarn prisma studio &
  # yarn run test

    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
      - 5555:5555 # TODO remove is for prisma studio
    env_file:
      - .env
    environment:
      BACKEND_PORT: ${BACKEND_PORT}
      FRONTEND_PORT: ${BACKEND_PORT}
      SESSION_SECRET: ${SESSION_SECRET}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: database
      POSTGRES_PORT: ${POSTGRES_PORT}
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST:-database}:${POSTGRES_PORT}/pong?schema=public
      INTRA42_CLIENT_ID: ${INTRA42_CLIENT_ID}
      INTRA42_CLIENT_SECRET: ${INTRA42_CLIENT_SECRET}
      INTRA42_CALLBACK_URL: ${INTRA42_CALLBACK_URL}
      GITHUB_CLIENT_ID: ${GITHUB_CLIENT_ID}
      GITHUB_CLIENT_SECRET: ${GITHUB_CLIENT_SECRET}
      GITHUB_CALLBACK_URL: ${GITHUB_CALLBACK_URL}
    networks:
      - transcendence
    volumes:
      - ./${BACKEND_NAME}:/app-${BACKEND_NAME}
      - backend_node_modules:/app-${BACKEND_NAME}/node_modules/
      - avatars:/app-${BACKEND_NAME}/avatars
    # stdin_open: true
    # tty: true
    restart: unless-stopped
    healthcheck:
      test: curl -fsSL http://localhost:${BACKEND_PORT}/healthcheck
      interval: 3s
      timeout: 1s
      retries: 30
      start_period: 0s

  controller:
    container_name: health_controller
    image: hello-world
    restart: 'no'
    networks:
      - transcendence
    depends_on:
      backend:
        condition: service_healthy
      database:
        condition: service_healthy

volumes:
  db: {}
  avatars: {}
  backend_node_modules: {}

networks:
  transcendence:
