generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

generator dbml {
  projectDatabaseType = "PostgreSQL"
  provider            = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int     @id @default(autoincrement())
  nickname     String? @unique
  username     String
  avatar       String?
  profileId    String
  provider     String
  blockedUsers Int[]

  status     StatusUser  @default(ONLINE)
  totpSecret TotpSecret?
  role       Role        @default(USER)

  matchEntries MatchEntry[]

  stats             Stats[]
  friends           User[]            @relation("Friendslist")
  friendsOf         User[]            @relation("Friendslist")
  achievement       UserAchivement[]
  invitationEmit    MatchInvitation[] @relation("InvitationEmit")
  invitationReceive MatchInvitation[] @relation("InvitationReceive")
  Message           Message[]         @relation("MessageAuthor")
  Member            Member[]          @relation("ChatRoomMember")
  ChatRoom          ChatRoom[]
  
  @@unique([profileId, provider])
}

model Stats {
  id      Int  @id @default(autoincrement())
  nb_game Int  @default(0)
  nb_win  Int  @default(0)
  User    User @relation(fields: [userId], references: [id])
  userId  Int  @unique

  @@map("Statistique")
}

enum StatusUser {
  ONLINE
  OFFLINE
  PLAYING
}

model TotpSecret {
  id       Int     @id @default(autoincrement())
  secret   String
  verified Boolean @default(false)

  // User
  userId Int?  @unique
  user   User? @relation(fields: [userId], references: [id])
}

enum Role {
  USER
  ADMIN
}

model Achievement {
  id          Int              @id @default(autoincrement())
  Name        String           @unique
  Title       String           @unique
  Description String
  icon_path   String?
  user        UserAchivement[]

  @@map("Achievements")
}

model UserAchivement {
  user          User        @relation(fields: [userId], references: [id])
  userId        Int
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  achievementId Int

  @@id([userId, achievementId])
}

model MatchEntry {
  id    Int @id @default(autoincrement())
  score Int

  // User
  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  matchId Int
  match   Match @relation(fields: [matchId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Match {
  id        Int          @id @default(autoincrement())
  entries   MatchEntry[]
  state     MatchState
  startDate DateTime?
  endDate   DateTime?
}

model MatchInvitation {
  id          Int                  @id @default(autoincrement())
  createdBy   User                 @relation("InvitationEmit", fields: [createdById], references: [id])
  createdById Int                  @unique
  sendToId    Int                  
  sendTo      User                 @relation("InvitationReceive", fields: [sendToId], references: [id])
  obstacle    Boolean
  winScore    Int                  @default(5)
  status      InvitationState @default(Pending)
}

enum InvitationState {
  Pending
  Started
  Finished
}

enum MatchState {
  Scheduled
  Started
  Finished // MEMO Only use this
}

// https://www.npmjs.com/package/@quixo3/prisma-session-store#Model
model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

model Message {
  id           Int       @id @default(autoincrement())
  author       User      @relation("MessageAuthor", fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId     Int
  data         String
  ChatRoom     ChatRoom @relation(fields: [chatRoomName], references: [name], onDelete: Cascade, onUpdate: Cascade)
  chatRoomName String
}

model Member {
  memberId     Int
  member       User      @relation("ChatRoomMember", fields: [memberId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  isOnline     Boolean
  modes        String
  ChatRoom     ChatRoom @relation(fields: [chatRoomName], references: [name], onDelete: Cascade, onUpdate: Cascade)
  chatRoomName String

  @@id([memberId, chatRoomName])
}

model ChatRoom {
  name        String    @id
  owner       Int
  modes       String
  password    String
  userLimit   Int
  members     Member[]
  messages    Message[]
  bannedUsers User[]
}
