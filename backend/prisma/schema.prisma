generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

generator dbml {
  projectDatabaseType = "PostgreSQL"
  provider            = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int     @id @default(autoincrement()) 
  nickname  String? @unique
  username  String
  avatar    String?
  profileId String
  provider  String
  // blockedUsers  String[]

  status        StatusUser @default(ONLINE)
  totpSecret    TotpSecret?
  role          Role       @default(USER)

  // MatchEntry
  matchEntries MatchEntry[]

  stats       Stats[]
  friends     Friends[]
  Achievement        UserAchivement[]
  invitation  MatchInvitation[]
  @@unique([profileId, provider])
}

model Stats {
  id          Int    @id @default(autoincrement())
  nb_game     Int    @default(0)
  nb_win      Int    @default(0)
  User        User   @relation(fields: [userId], references: [id])
  userId      Int    @unique
  @@map("Statistique")
}

enum StatusUser {
  ONLINE
  OFFLINE
  PLAYING
}

model TotpSecret {
  id       Int     @id @default(autoincrement())
  secret   String
  verified Boolean @default(false)

  // User
  userId Int?  @unique
  user   User? @relation(fields: [userId], references: [id])
}

enum Role {
  USER
  ADMIN
}

model Achievement {
  id          Int     @id @default(autoincrement())
  Name        String  @unique
  Title       String  @unique
  Description String
  icon_path   String?
  user        UserAchivement[]
  @@map("Achievements")
}

model UserAchivement {
 user User @relation(fields : [userId], references: [id])
 userId Int
 achievement   Achievement @relation(fields: [achievementId], references: [id])
 achievementId Int
 @@id([userId, achievementId])
}


model Friends {
  user      User     @relation(fields: [friendId], references: [id])
  friendId  Int      @id
  addedDate DateTime @default(now())
}

// model GithubUser {
//   user User?
// }

model MatchEntry {
  id    Int @id @default(autoincrement())
  score Int

  // User
  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  matchId Int
  match   Match @relation(fields: [matchId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Match {
  id        Int          @id @default(autoincrement())
  entries   MatchEntry[]
  state     MatchState
  startDate DateTime?
  endDate   DateTime?
}

model MatchInvitation {
    id          Int                  @id @default(autoincrement())
    // createdBy   User                 @relation(fields: [createdById], references: [id])
    // createdById Int                  
    sendToId    Int                  
    sendTo      User                 @relation(fields: [sendToId], references: [id])
    status      InvitationState @default(Pending)

}

enum InvitationState {
  Pending
  Started
  Finished
}

enum MatchState {
  Scheduled
  Started
  Finished // MEMO Only use this
}

// https://www.npmjs.com/package/@quixo3/prisma-session-store#Model
model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}
